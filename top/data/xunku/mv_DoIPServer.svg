<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="614.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="597" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="597" > </text>
<g id="frames">
<g >
<title>el0_svc_common.constprop.0 (127,081,934 samples, 9.71%)</title><rect x="52.1" y="117" width="114.6" height="15.0" fill="rgb(206,214,20)" rx="2" ry="2" />
<text  x="55.13" y="127.5" >el0_svc_common..</text>
</g>
<g >
<title>iox::cxx::internal::ReturnSuccess&lt;void&gt;::call&lt;iox::cxx::function_ref&lt;void  (599,902,920 samples, 45.84%)</title><rect x="10.0" y="373" width="540.9" height="15.0" fill="rgb(221,126,17)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >iox::cxx::internal::ReturnSuccess&lt;void&gt;::call&lt;iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>pthread_mutex_unlock@plt (24,162,461 samples, 1.85%)</title><rect x="1150.9" y="485" width="21.8" height="15.0" fill="rgb(216,185,42)" rx="2" ry="2" />
<text  x="1153.92" y="495.5" >p..</text>
</g>
<g >
<title>iox::posix::UnixDomainSocket::timedSend (201,175,631 samples, 15.37%)</title><rect x="24.4" y="229" width="181.4" height="15.0" fill="rgb(246,147,17)" rx="2" ry="2" />
<text  x="27.39" y="239.5" >iox::posix::UnixDomainS..</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="485" width="17.2" height="15.0" fill="rgb(246,74,41)" rx="2" ry="2" />
<text  x="1175.77" y="495.5" ></text>
</g>
<g >
<title>el0_sync_handler (165,875,560 samples, 12.67%)</title><rect x="604.8" y="293" width="149.5" height="15.0" fill="rgb(243,153,33)" rx="2" ry="2" />
<text  x="607.79" y="303.5" >el0_sync_handler</text>
</g>
<g >
<title>std::locale::locale (21,435,316 samples, 1.64%)</title><rect x="494.6" y="229" width="19.4" height="15.0" fill="rgb(221,104,41)" rx="2" ry="2" />
<text  x="497.64" y="239.5" ></text>
</g>
<g >
<title>iox::cxx::MethodCallback&lt;void&gt;::operator (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="389" width="17.2" height="15.0" fill="rgb(243,69,43)" rx="2" ry="2" />
<text  x="1175.77" y="399.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt;@plt (31,990,151 samples, 2.44%)</title><rect x="269.2" y="245" width="28.8" height="15.0" fill="rgb(254,27,36)" rx="2" ry="2" />
<text  x="272.15" y="255.5" >st..</text>
</g>
<g >
<title>_raw_spin_unlock_irq (49,187,299 samples, 3.76%)</title><rect x="710.0" y="133" width="44.3" height="15.0" fill="rgb(224,179,14)" rx="2" ry="2" />
<text  x="712.99" y="143.5" >_raw..</text>
</g>
<g >
<title>el0_sync (43,318,395 samples, 3.31%)</title><rect x="166.7" y="165" width="39.1" height="15.0" fill="rgb(232,62,50)" rx="2" ry="2" />
<text  x="169.71" y="175.5" >el0..</text>
</g>
<g >
<title>do_el0_svc (127,081,934 samples, 9.71%)</title><rect x="52.1" y="133" width="114.6" height="15.0" fill="rgb(217,208,30)" rx="2" ry="2" />
<text  x="55.13" y="143.5" >do_el0_svc</text>
</g>
<g >
<title>listenUpgrade (354,254,045 samples, 27.07%)</title><rect x="853.3" y="549" width="319.4" height="15.0" fill="rgb(243,221,30)" rx="2" ry="2" />
<text  x="856.31" y="559.5" >listenUpgrade</text>
</g>
<g >
<title>iox::units::Duration::timespec (50,501,662 samples, 3.86%)</title><rect x="793.1" y="373" width="45.6" height="15.0" fill="rgb(225,150,44)" rx="2" ry="2" />
<text  x="796.14" y="383.5" >iox:..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="469" width="17.2" height="15.0" fill="rgb(219,140,16)" rx="2" ry="2" />
<text  x="1175.77" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="501" width="17.2" height="15.0" fill="rgb(207,108,11)" rx="2" ry="2" />
<text  x="1175.77" y="511.5" ></text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;long, int, void const*, unsigned long, int, sockaddr const*, unsigned int&gt;::operator (43,318,395 samples, 3.31%)</title><rect x="166.7" y="213" width="39.1" height="15.0" fill="rgb(242,99,10)" rx="2" ry="2" />
<text  x="169.71" y="223.5" >iox..</text>
</g>
<g >
<title>el0_svc (43,318,395 samples, 3.31%)</title><rect x="166.7" y="133" width="39.1" height="15.0" fill="rgb(224,5,17)" rx="2" ry="2" />
<text  x="169.71" y="143.5" >el0..</text>
</g>
<g >
<title>sock_setsockopt (127,081,934 samples, 9.71%)</title><rect x="52.1" y="69" width="114.6" height="15.0" fill="rgb(219,125,23)" rx="2" ry="2" />
<text  x="55.13" y="79.5" >sock_setsockopt</text>
</g>
<g >
<title>std::ios_base::_M_init (17,815,926 samples, 1.36%)</title><rect x="353.5" y="197" width="16.1" height="15.0" fill="rgb(239,18,38)" rx="2" ry="2" />
<text  x="356.52" y="207.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (436,002 samples, 0.03%)</title><rect x="205.8" y="181" width="0.4" height="15.0" fill="rgb(207,30,24)" rx="2" ry="2" />
<text  x="208.76" y="191.5" ></text>
</g>
<g >
<title>do_nanosleep (94,316,438 samples, 7.21%)</title><rect x="1000.5" y="341" width="85.1" height="15.0" fill="rgb(226,176,29)" rx="2" ry="2" />
<text  x="1003.53" y="351.5" >do_nanosleep</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (61,585,809 samples, 4.71%)</title><rect x="298.0" y="197" width="55.5" height="15.0" fill="rgb(208,9,39)" rx="2" ry="2" />
<text  x="300.99" y="207.5" >std::..</text>
</g>
<g >
<title>iox::concurrent::PeriodicTask&lt;iox::cxx::MethodCallback&lt;void&gt; &gt;::run (919,131,118 samples, 70.23%)</title><rect x="10.0" y="405" width="828.7" height="15.0" fill="rgb(244,58,22)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >iox::concurrent::PeriodicTask&lt;iox::cxx::MethodCallback&lt;void&gt; &gt;::run</text>
</g>
<g >
<title>iox::runtime::IpcMessageTypeToString[abi:cxx11] (256,471,024 samples, 19.60%)</title><rect x="298.0" y="261" width="231.2" height="15.0" fill="rgb(241,120,2)" rx="2" ry="2" />
<text  x="300.99" y="271.5" >iox::runtime::IpcMessageTypeTo..</text>
</g>
<g >
<title>fpsimd_restore_current_state (31,443,510 samples, 2.40%)</title><rect x="1085.6" y="421" width="28.3" height="15.0" fill="rgb(212,113,13)" rx="2" ry="2" />
<text  x="1088.56" y="431.5" >fp..</text>
</g>
<g >
<title>el0_svc (108,672,803 samples, 8.30%)</title><rect x="987.6" y="421" width="98.0" height="15.0" fill="rgb(240,8,32)" rx="2" ry="2" />
<text  x="990.59" y="431.5" >el0_svc</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (17,242,069 samples, 1.32%)</title><rect x="1013.9" y="325" width="15.6" height="15.0" fill="rgb(215,210,51)" rx="2" ry="2" />
<text  x="1016.95" y="335.5" ></text>
</g>
<g >
<title>[libpthread-2.30.so] (354,254,045 samples, 27.07%)</title><rect x="853.3" y="517" width="319.4" height="15.0" fill="rgb(211,72,43)" rx="2" ry="2" />
<text  x="856.31" y="527.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>release_sock (105,140,318 samples, 8.03%)</title><rect x="71.9" y="53" width="94.8" height="15.0" fill="rgb(243,62,29)" rx="2" ry="2" />
<text  x="74.92" y="63.5" >release_sock</text>
</g>
<g >
<title>iox::cxx::variant&lt;iox::posix::PosixCallResult&lt;long&gt;, iox::posix::PosixCallResult&lt;long&gt; &gt;::~variant@plt (15,235,598 samples, 1.16%)</title><rect x="38.4" y="213" width="13.7" height="15.0" fill="rgb(233,143,17)" rx="2" ry="2" />
<text  x="41.40" y="223.5" ></text>
</g>
<g >
<title>unix_dgram_sendmsg (25,403,279 samples, 1.94%)</title><rect x="182.9" y="53" width="22.9" height="15.0" fill="rgb(231,96,17)" rx="2" ry="2" />
<text  x="185.86" y="63.5" >u..</text>
</g>
<g >
<title>pthread_mutex_lock@plt (40,789,167 samples, 3.12%)</title><rect x="1114.1" y="469" width="36.8" height="15.0" fill="rgb(223,63,22)" rx="2" ry="2" />
<text  x="1117.14" y="479.5" >pth..</text>
</g>
<g >
<title>iox::cxx::internal::call_at_index&lt;0ul, iox::posix::PosixCallResult&lt;int&gt;, iox::posix::PosixCallResult&lt;int&gt; &gt;::destructor (15,539,704 samples, 1.19%)</title><rect x="24.4" y="181" width="14.0" height="15.0" fill="rgb(252,226,13)" rx="2" ry="2" />
<text  x="27.39" y="191.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (36,220,491 samples, 2.77%)</title><rect x="320.9" y="149" width="32.6" height="15.0" fill="rgb(216,21,33)" rx="2" ry="2" />
<text  x="323.86" y="159.5" >__..</text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (16,920,404 samples, 1.29%)</title><rect x="514.0" y="245" width="15.2" height="15.0" fill="rgb(249,23,5)" rx="2" ry="2" />
<text  x="516.97" y="255.5" ></text>
</g>
<g >
<title>__schedule (62,190,876 samples, 4.75%)</title><rect x="1029.5" y="309" width="56.1" height="15.0" fill="rgb(209,89,24)" rx="2" ry="2" />
<text  x="1032.49" y="319.5" >__sch..</text>
</g>
<g >
<title>_raw_spin_unlock_irq (62,190,193 samples, 4.75%)</title><rect x="1029.5" y="293" width="56.1" height="15.0" fill="rgb(212,61,3)" rx="2" ry="2" />
<text  x="1032.49" y="303.5" >_raw_..</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (218,115,304 samples, 16.67%)</title><rect x="298.0" y="229" width="196.6" height="15.0" fill="rgb(217,185,21)" rx="2" ry="2" />
<text  x="300.99" y="239.5" >std::__cxx11::basic_strin..</text>
</g>
<g >
<title>iox::cxx::convert::toString&lt;int&gt; (239,550,620 samples, 18.30%)</title><rect x="298.0" y="245" width="216.0" height="15.0" fill="rgb(231,14,46)" rx="2" ry="2" />
<text  x="300.99" y="255.5" >iox::cxx::convert::toString&lt;..</text>
</g>
<g >
<title>iox_sem_timedwait (183,325,661 samples, 14.01%)</title><rect x="589.1" y="357" width="165.2" height="15.0" fill="rgb(237,210,23)" rx="2" ry="2" />
<text  x="592.06" y="367.5" >iox_sem_timedwait</text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt;@plt (17,401,386 samples, 1.33%)</title><rect x="253.5" y="245" width="15.7" height="15.0" fill="rgb(214,169,34)" rx="2" ry="2" />
<text  x="256.46" y="255.5" ></text>
</g>
<g >
<title>iox::runtime::IpcRuntimeInterface::sendKeepalive (599,902,920 samples, 45.84%)</title><rect x="10.0" y="277" width="540.9" height="15.0" fill="rgb(206,208,49)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >iox::runtime::IpcRuntimeInterface::sendKeepalive</text>
</g>
<g >
<title>do_futex (165,875,560 samples, 12.67%)</title><rect x="604.8" y="213" width="149.5" height="15.0" fill="rgb(229,94,33)" rx="2" ry="2" />
<text  x="607.79" y="223.5" >do_futex</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (79,401,735 samples, 6.07%)</title><rect x="298.0" y="213" width="71.6" height="15.0" fill="rgb(244,212,36)" rx="2" ry="2" />
<text  x="300.99" y="223.5" >std::bas..</text>
</g>
<g >
<title>el0_irq_naked (2,048,374 samples, 0.16%)</title><rect x="920.5" y="453" width="1.9" height="15.0" fill="rgb(252,184,37)" rx="2" ry="2" />
<text  x="923.54" y="463.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (935,367,195 samples, 71.47%)</title><rect x="10.0" y="421" width="843.3" height="15.0" fill="rgb(242,186,25)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>iox::cxx::variant&lt;iox::posix::SemaphoreWaitState, iox::posix::SemaphoreError&gt;::emplace_at_index&lt;0ul, iox::posix::SemaphoreWaitState&gt; (24,058,609 samples, 1.84%)</title><rect x="567.4" y="357" width="21.7" height="15.0" fill="rgb(228,149,7)" rx="2" ry="2" />
<text  x="570.37" y="367.5" >i..</text>
</g>
<g >
<title>__arm64_sys_setsockopt (127,081,934 samples, 9.71%)</title><rect x="52.1" y="101" width="114.6" height="15.0" fill="rgb(216,3,2)" rx="2" ry="2" />
<text  x="55.13" y="111.5" >__arm64_sys_se..</text>
</g>
<g >
<title>el0_svc (165,875,560 samples, 12.67%)</title><rect x="604.8" y="277" width="149.5" height="15.0" fill="rgb(232,5,28)" rx="2" ry="2" />
<text  x="607.79" y="287.5" >el0_svc</text>
</g>
<g >
<title>std::locale::locale (20,953,258 samples, 1.60%)</title><rect x="475.8" y="213" width="18.8" height="15.0" fill="rgb(239,95,4)" rx="2" ry="2" />
<text  x="478.75" y="223.5" ></text>
</g>
<g >
<title>el0_sync_handler (43,318,395 samples, 3.31%)</title><rect x="166.7" y="149" width="39.1" height="15.0" fill="rgb(211,23,54)" rx="2" ry="2" />
<text  x="169.71" y="159.5" >el0..</text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;int, int, int, int, void const*, unsigned int&gt;::operator (15,956,750 samples, 1.22%)</title><rect x="10.0" y="229" width="14.4" height="15.0" fill="rgb(212,9,18)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>__dynamic_cast (436,002 samples, 0.03%)</title><rect x="205.8" y="165" width="0.4" height="15.0" fill="rgb(214,189,45)" rx="2" ry="2" />
<text  x="208.76" y="175.5" ></text>
</g>
<g >
<title>setsockopt (127,081,934 samples, 9.71%)</title><rect x="52.1" y="197" width="114.6" height="15.0" fill="rgb(222,154,8)" rx="2" ry="2" />
<text  x="55.13" y="207.5" >setsockopt</text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;int, sem_t*, timespec const*&gt;::operator (183,325,661 samples, 14.01%)</title><rect x="589.1" y="373" width="165.2" height="15.0" fill="rgb(214,42,32)" rx="2" ry="2" />
<text  x="592.06" y="383.5" >iox::posix::PosixCall..</text>
</g>
<g >
<title>el0_sync (127,081,934 samples, 9.71%)</title><rect x="52.1" y="181" width="114.6" height="15.0" fill="rgb(253,24,54)" rx="2" ry="2" />
<text  x="55.13" y="191.5" >el0_sync</text>
</g>
<g >
<title>rcu_core_si (2,048,374 samples, 0.16%)</title><rect x="920.5" y="373" width="1.9" height="15.0" fill="rgb(241,71,54)" rx="2" ry="2" />
<text  x="923.54" y="383.5" ></text>
</g>
<g >
<title>do_notify_resume (31,443,510 samples, 2.40%)</title><rect x="1085.6" y="437" width="28.3" height="15.0" fill="rgb(228,113,25)" rx="2" ry="2" />
<text  x="1088.56" y="447.5" >do..</text>
</g>
<g >
<title>iox::cxx::expected&lt;iox::posix::SemaphoreWaitState, iox::posix::SemaphoreError&gt;::expected (24,058,609 samples, 1.84%)</title><rect x="567.4" y="373" width="21.7" height="15.0" fill="rgb(227,31,41)" rx="2" ry="2" />
<text  x="570.37" y="383.5" >i..</text>
</g>
<g >
<title>[libc-2.30.so] (354,254,045 samples, 27.07%)</title><rect x="853.3" y="533" width="319.4" height="15.0" fill="rgb(233,81,32)" rx="2" ry="2" />
<text  x="856.31" y="543.5" >[libc-2.30.so]</text>
</g>
<g >
<title>[libc-2.30.so] (935,367,195 samples, 71.47%)</title><rect x="10.0" y="533" width="843.3" height="15.0" fill="rgb(218,131,20)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >[libc-2.30.so]</text>
</g>
<g >
<title>std::__invoke&lt;void  (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="437" width="17.2" height="15.0" fill="rgb(206,209,1)" rx="2" ry="2" />
<text  x="1175.77" y="447.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (25,365,318 samples, 1.94%)</title><rect x="298.0" y="181" width="22.9" height="15.0" fill="rgb(229,104,35)" rx="2" ry="2" />
<text  x="300.99" y="191.5" >s..</text>
</g>
<g >
<title>futex_wait_queue_me (149,892,238 samples, 11.45%)</title><rect x="619.2" y="181" width="135.1" height="15.0" fill="rgb(233,62,40)" rx="2" ry="2" />
<text  x="622.20" y="191.5" >futex_wait_queue_me</text>
</g>
<g >
<title>el0_sync (165,875,560 samples, 12.67%)</title><rect x="604.8" y="309" width="149.5" height="15.0" fill="rgb(220,153,48)" rx="2" ry="2" />
<text  x="607.79" y="319.5" >el0_sync</text>
</g>
<g >
<title>iox::posix::PosixCallVerificator&lt;int&gt;::PosixCallVerificator@plt (17,574,807 samples, 1.34%)</title><rect x="777.3" y="373" width="15.8" height="15.0" fill="rgb(207,204,15)" rx="2" ry="2" />
<text  x="780.30" y="383.5" ></text>
</g>
<g >
<title>el0_sync_handler (108,672,803 samples, 8.30%)</title><rect x="987.6" y="437" width="98.0" height="15.0" fill="rgb(228,194,21)" rx="2" ry="2" />
<text  x="990.59" y="447.5" >el0_sync_ha..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="453" width="17.2" height="15.0" fill="rgb(235,198,10)" rx="2" ry="2" />
<text  x="1175.77" y="463.5" ></text>
</g>
<g >
<title>hrtimer_sleeper_start_expires (100,704,939 samples, 7.69%)</title><rect x="619.2" y="165" width="90.8" height="15.0" fill="rgb(211,187,17)" rx="2" ry="2" />
<text  x="622.20" y="175.5" >hrtimer_sl..</text>
</g>
<g >
<title>iox::cxx::internal::Require@plt (16,236,077 samples, 1.24%)</title><rect x="838.7" y="405" width="14.6" height="15.0" fill="rgb(226,96,5)" rx="2" ry="2" />
<text  x="841.67" y="415.5" ></text>
</g>
<g >
<title>do_el0_svc (165,875,560 samples, 12.67%)</title><rect x="604.8" y="261" width="149.5" height="15.0" fill="rgb(236,216,20)" rx="2" ry="2" />
<text  x="607.79" y="271.5" >do_el0_svc</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="421" width="17.2" height="15.0" fill="rgb(205,41,16)" rx="2" ry="2" />
<text  x="1175.77" y="431.5" ></text>
</g>
<g >
<title>sendto (43,318,395 samples, 3.31%)</title><rect x="166.7" y="181" width="39.1" height="15.0" fill="rgb(248,23,5)" rx="2" ry="2" />
<text  x="169.71" y="191.5" >sen..</text>
</g>
<g >
<title>iox::runtime::IpcMessage::addEntry&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (436,002 samples, 0.03%)</title><rect x="205.8" y="245" width="0.4" height="15.0" fill="rgb(224,127,15)" rx="2" ry="2" />
<text  x="208.76" y="255.5" ></text>
</g>
<g >
<title>[libc-2.30.so] (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="533" width="17.2" height="15.0" fill="rgb(234,152,11)" rx="2" ry="2" />
<text  x="1175.77" y="543.5" ></text>
</g>
<g >
<title>el0_svc_common.constprop.0 (43,318,395 samples, 3.31%)</title><rect x="166.7" y="101" width="39.1" height="15.0" fill="rgb(236,159,32)" rx="2" ry="2" />
<text  x="169.71" y="111.5" >el0..</text>
</g>
<g >
<title>rcu_cblist_dequeue (2,048,374 samples, 0.16%)</title><rect x="920.5" y="357" width="1.9" height="15.0" fill="rgb(206,71,11)" rx="2" ry="2" />
<text  x="923.54" y="367.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (436,002 samples, 0.03%)</title><rect x="205.8" y="149" width="0.4" height="15.0" fill="rgb(251,51,47)" rx="2" ry="2" />
<text  x="208.76" y="159.5" ></text>
</g>
<g >
<title>maybe_add_creds (25,403,279 samples, 1.94%)</title><rect x="182.9" y="37" width="22.9" height="15.0" fill="rgb(216,135,30)" rx="2" ry="2" />
<text  x="185.86" y="47.5" >m..</text>
</g>
<g >
<title>KeepAlive (935,367,195 samples, 71.47%)</title><rect x="10.0" y="549" width="843.3" height="15.0" fill="rgb(250,79,4)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >KeepAlive</text>
</g>
<g >
<title>_raw_write_lock_irqsave (21,941,616 samples, 1.68%)</title><rect x="52.1" y="53" width="19.8" height="15.0" fill="rgb(251,138,21)" rx="2" ry="2" />
<text  x="55.13" y="63.5" ></text>
</g>
<g >
<title>get_timespec64 (14,356,365 samples, 1.10%)</title><rect x="987.6" y="357" width="12.9" height="15.0" fill="rgb(241,14,41)" rx="2" ry="2" />
<text  x="990.59" y="367.5" ></text>
</g>
<g >
<title>__schedule (49,187,299 samples, 3.76%)</title><rect x="710.0" y="149" width="44.3" height="15.0" fill="rgb(216,111,45)" rx="2" ry="2" />
<text  x="712.99" y="159.5" >__sc..</text>
</g>
<g >
<title>_raw_write_lock_irqsave (17,915,116 samples, 1.37%)</title><rect x="166.7" y="53" width="16.2" height="15.0" fill="rgb(243,54,6)" rx="2" ry="2" />
<text  x="169.71" y="63.5" ></text>
</g>
<g >
<title>[libpthread-2.30.so] (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="517" width="17.2" height="15.0" fill="rgb(231,160,25)" rx="2" ry="2" />
<text  x="1175.77" y="527.5" ></text>
</g>
<g >
<title>all (1,308,806,316 samples, 100%)</title><rect x="10.0" y="565" width="1180.0" height="15.0" fill="rgb(237,176,38)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>iox::posix::PosixCallEvaluator&lt;int&gt;::evaluate (25,462,865 samples, 1.95%)</title><rect x="754.3" y="373" width="23.0" height="15.0" fill="rgb(254,224,10)" rx="2" ry="2" />
<text  x="757.34" y="383.5" >i..</text>
</g>
<g >
<title>UdsServer::GetNeedResetExceptionState (4,017,325 samples, 0.31%)</title><rect x="875.1" y="469" width="3.6" height="15.0" fill="rgb(206,145,39)" rx="2" ry="2" />
<text  x="878.10" y="479.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (256,026 samples, 0.02%)</title><rect x="1113.9" y="469" width="0.2" height="15.0" fill="rgb(214,136,52)" rx="2" ry="2" />
<text  x="1116.91" y="479.5" ></text>
</g>
<g >
<title>__handle_domain_irq (2,048,374 samples, 0.16%)</title><rect x="920.5" y="421" width="1.9" height="15.0" fill="rgb(226,172,25)" rx="2" ry="2" />
<text  x="923.54" y="431.5" ></text>
</g>
<g >
<title>fpsimd_load_state (31,443,510 samples, 2.40%)</title><rect x="1085.6" y="405" width="28.3" height="15.0" fill="rgb(231,202,54)" rx="2" ry="2" />
<text  x="1088.56" y="415.5" >fp..</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (108,672,803 samples, 8.30%)</title><rect x="987.6" y="389" width="98.0" height="15.0" fill="rgb(237,166,38)" rx="2" ry="2" />
<text  x="990.59" y="399.5" >el0_svc_com..</text>
</g>
<g >
<title>__sys_sendto (43,318,395 samples, 3.31%)</title><rect x="166.7" y="69" width="39.1" height="15.0" fill="rgb(233,42,23)" rx="2" ry="2" />
<text  x="169.71" y="79.5" >__s..</text>
</g>
<g >
<title>__nanosleep (212,433,002 samples, 16.23%)</title><rect x="922.4" y="469" width="191.5" height="15.0" fill="rgb(210,15,6)" rx="2" ry="2" />
<text  x="925.39" y="479.5" >__nanosleep</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (17,567,621 samples, 1.34%)</title><rect x="206.2" y="245" width="15.8" height="15.0" fill="rgb(220,173,40)" rx="2" ry="2" />
<text  x="209.16" y="255.5" ></text>
</g>
<g >
<title>iox_sendto (43,318,395 samples, 3.31%)</title><rect x="166.7" y="197" width="39.1" height="15.0" fill="rgb(233,220,25)" rx="2" ry="2" />
<text  x="169.71" y="207.5" >iox..</text>
</g>
<g >
<title>iox::cxx::function_ref&lt;void  (599,902,920 samples, 45.84%)</title><rect x="10.0" y="357" width="540.9" height="15.0" fill="rgb(250,31,41)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>iox::cxx::function_ref&lt;void  (599,902,920 samples, 45.84%)</title><rect x="10.0" y="341" width="540.9" height="15.0" fill="rgb(246,88,38)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>iox::cxx::expected&lt;iox::posix::PosixCallResult&lt;int&gt;, iox::posix::PosixCallResult&lt;int&gt; &gt;::~expected (15,539,704 samples, 1.19%)</title><rect x="24.4" y="213" width="14.0" height="15.0" fill="rgb(207,211,46)" rx="2" ry="2" />
<text  x="27.39" y="223.5" ></text>
</g>
<g >
<title>__arm64_sys_sendto (43,318,395 samples, 3.31%)</title><rect x="166.7" y="85" width="39.1" height="15.0" fill="rgb(217,101,1)" rx="2" ry="2" />
<text  x="169.71" y="95.5" >__a..</text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (36,220,491 samples, 2.77%)</title><rect x="320.9" y="181" width="32.6" height="15.0" fill="rgb(216,137,2)" rx="2" ry="2" />
<text  x="323.86" y="191.5" >st..</text>
</g>
<g >
<title>iox::concurrent::PeriodicTask&lt;iox::cxx::MethodCallback&lt;void&gt; &gt;::run (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="405" width="17.2" height="15.0" fill="rgb(223,56,6)" rx="2" ry="2" />
<text  x="1175.77" y="415.5" ></text>
</g>
<g >
<title>[libpthread-2.30.so] (935,367,195 samples, 71.47%)</title><rect x="10.0" y="517" width="843.3" height="15.0" fill="rgb(226,61,46)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>std::forward&lt;iox::posix::PosixCallResult&lt;int&gt;&amp;&gt;@plt (25,462,865 samples, 1.95%)</title><rect x="754.3" y="357" width="23.0" height="15.0" fill="rgb(253,202,45)" rx="2" ry="2" />
<text  x="757.34" y="367.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (436,002 samples, 0.03%)</title><rect x="205.8" y="229" width="0.4" height="15.0" fill="rgb(252,30,37)" rx="2" ry="2" />
<text  x="208.76" y="239.5" ></text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;int, int, timespec*&gt;::PosixCallBuilder (24,484,067 samples, 1.87%)</title><rect x="793.1" y="357" width="22.1" height="15.0" fill="rgb(225,17,31)" rx="2" ry="2" />
<text  x="796.14" y="367.5" >i..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (935,367,195 samples, 71.47%)</title><rect x="10.0" y="469" width="843.3" height="15.0" fill="rgb(250,174,33)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (17,085,053 samples, 1.31%)</title><rect x="222.0" y="245" width="15.4" height="15.0" fill="rgb(208,150,17)" rx="2" ry="2" />
<text  x="225.00" y="255.5" ></text>
</g>
<g >
<title>std::locale::_S_initialize (117,760,311 samples, 9.00%)</title><rect x="369.6" y="213" width="106.2" height="15.0" fill="rgb(238,122,10)" rx="2" ry="2" />
<text  x="372.58" y="223.5" >std::locale:..</text>
</g>
<g >
<title>iox::runtime::PoshRuntimeImpl::sendKeepAliveAndHandleShutdownPreparation (599,902,920 samples, 45.84%)</title><rect x="10.0" y="293" width="540.9" height="15.0" fill="rgb(205,107,30)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >iox::runtime::PoshRuntimeImpl::sendKeepAliveAndHandleShutdownPreparation</text>
</g>
<g >
<title>__softirqentry_text_start (2,048,374 samples, 0.16%)</title><rect x="920.5" y="389" width="1.9" height="15.0" fill="rgb(225,56,29)" rx="2" ry="2" />
<text  x="923.54" y="399.5" ></text>
</g>
<g >
<title>work_pending (31,443,510 samples, 2.40%)</title><rect x="1085.6" y="453" width="28.3" height="15.0" fill="rgb(210,197,48)" rx="2" ry="2" />
<text  x="1088.56" y="463.5" >wo..</text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;int, int, timespec*&gt;::operator (26,017,595 samples, 1.99%)</title><rect x="815.2" y="357" width="23.5" height="15.0" fill="rgb(239,121,40)" rx="2" ry="2" />
<text  x="818.22" y="367.5" >i..</text>
</g>
<g >
<title>el0_sync (108,672,803 samples, 8.30%)</title><rect x="987.6" y="453" width="98.0" height="15.0" fill="rgb(207,7,53)" rx="2" ry="2" />
<text  x="990.59" y="463.5" >el0_sync</text>
</g>
<g >
<title>__pthread_once (20,953,258 samples, 1.60%)</title><rect x="475.8" y="197" width="18.8" height="15.0" fill="rgb(244,101,23)" rx="2" ry="2" />
<text  x="478.75" y="207.5" ></text>
</g>
<g >
<title>irq_exit (2,048,374 samples, 0.16%)</title><rect x="920.5" y="405" width="1.9" height="15.0" fill="rgb(248,202,27)" rx="2" ry="2" />
<text  x="923.54" y="415.5" ></text>
</g>
<g >
<title>[libpthread-2.30.so] (183,325,661 samples, 14.01%)</title><rect x="589.1" y="341" width="165.2" height="15.0" fill="rgb(240,172,18)" rx="2" ry="2" />
<text  x="592.06" y="351.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>iox::cxx::function_ref&lt;void  (599,902,920 samples, 45.84%)</title><rect x="10.0" y="325" width="540.9" height="15.0" fill="rgb(244,101,4)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>iox::posix::UnixDomainSocket::send (217,132,381 samples, 16.59%)</title><rect x="10.0" y="245" width="195.8" height="15.0" fill="rgb(234,30,46)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >iox::posix::UnixDomainSoc..</text>
</g>
<g >
<title>schedule (62,190,876 samples, 4.75%)</title><rect x="1029.5" y="325" width="56.1" height="15.0" fill="rgb(253,106,45)" rx="2" ry="2" />
<text  x="1032.49" y="335.5" >sched..</text>
</g>
<g >
<title>futex_wait (165,873,483 samples, 12.67%)</title><rect x="604.8" y="197" width="149.5" height="15.0" fill="rgb(242,198,46)" rx="2" ry="2" />
<text  x="607.79" y="207.5" >futex_wait</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (935,367,195 samples, 71.47%)</title><rect x="10.0" y="453" width="843.3" height="15.0" fill="rgb(250,182,5)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (935,367,195 samples, 71.47%)</title><rect x="10.0" y="501" width="843.3" height="15.0" fill="rgb(214,78,17)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>__arm64_sys_nanosleep (108,672,803 samples, 8.30%)</title><rect x="987.6" y="373" width="98.0" height="15.0" fill="rgb(223,125,50)" rx="2" ry="2" />
<text  x="990.59" y="383.5" >__arm64_sys..</text>
</g>
<g >
<title>std::forward&lt;void*&amp;&gt;@plt (18,279,246 samples, 1.40%)</title><rect x="550.9" y="373" width="16.4" height="15.0" fill="rgb(242,85,29)" rx="2" ry="2" />
<text  x="553.86" y="383.5" ></text>
</g>
<g >
<title>__dynamic_cast (36,220,491 samples, 2.77%)</title><rect x="320.9" y="165" width="32.6" height="15.0" fill="rgb(231,32,20)" rx="2" ry="2" />
<text  x="323.86" y="175.5" >__..</text>
</g>
<g >
<title>iox::cxx::variant&lt;iox::posix::PosixCallResult&lt;int&gt;, iox::posix::PosixCallResult&lt;int&gt; &gt;::~variant (15,539,704 samples, 1.19%)</title><rect x="24.4" y="197" width="14.0" height="15.0" fill="rgb(236,109,44)" rx="2" ry="2" />
<text  x="27.39" y="207.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (935,367,195 samples, 71.47%)</title><rect x="10.0" y="485" width="843.3" height="15.0" fill="rgb(249,45,27)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>__arm64_sys_futex (165,875,560 samples, 12.67%)</title><rect x="604.8" y="229" width="149.5" height="15.0" fill="rgb(239,51,26)" rx="2" ry="2" />
<text  x="607.79" y="239.5" >__arm64_sys_futex</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (165,875,560 samples, 12.67%)</title><rect x="604.8" y="245" width="149.5" height="15.0" fill="rgb(227,98,13)" rx="2" ry="2" />
<text  x="607.79" y="255.5" >el0_svc_common.cons..</text>
</g>
<g >
<title>[libpthread-2.30.so] (165,875,560 samples, 12.67%)</title><rect x="604.8" y="325" width="149.5" height="15.0" fill="rgb(205,159,18)" rx="2" ry="2" />
<text  x="607.79" y="335.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>__dynamic_cast (25,365,318 samples, 1.94%)</title><rect x="298.0" y="165" width="22.9" height="15.0" fill="rgb(236,4,7)" rx="2" ry="2" />
<text  x="300.99" y="175.5" >_..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (436,002 samples, 0.03%)</title><rect x="205.8" y="197" width="0.4" height="15.0" fill="rgb(250,5,39)" rx="2" ry="2" />
<text  x="208.76" y="207.5" ></text>
</g>
<g >
<title>iox::cxx::internal::methodCallbackCaller&lt;void, iox::runtime::PoshRuntimeImpl&gt; (599,902,920 samples, 45.84%)</title><rect x="10.0" y="309" width="540.9" height="15.0" fill="rgb(205,80,32)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >iox::cxx::internal::methodCallbackCaller&lt;void, iox::runtime::PoshRuntimeIm..</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (100,704,939 samples, 7.69%)</title><rect x="619.2" y="149" width="90.8" height="15.0" fill="rgb(238,214,50)" rx="2" ry="2" />
<text  x="622.20" y="159.5" >_raw_spin_..</text>
</g>
<g >
<title>__sys_setsockopt (127,081,934 samples, 9.71%)</title><rect x="52.1" y="85" width="114.6" height="15.0" fill="rgb(238,96,31)" rx="2" ry="2" />
<text  x="55.13" y="95.5" >__sys_setsockopt</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (354,254,045 samples, 27.07%)</title><rect x="853.3" y="501" width="319.4" height="15.0" fill="rgb(226,73,27)" rx="2" ry="2" />
<text  x="856.31" y="511.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>listenUpgrade (330,091,584 samples, 25.22%)</title><rect x="853.3" y="485" width="297.6" height="15.0" fill="rgb(223,213,26)" rx="2" ry="2" />
<text  x="856.31" y="495.5" >listenUpgrade</text>
</g>
<g >
<title>do_el0_svc (43,318,395 samples, 3.31%)</title><rect x="166.7" y="117" width="39.1" height="15.0" fill="rgb(247,74,1)" rx="2" ry="2" />
<text  x="169.71" y="127.5" >do_..</text>
</g>
<g >
<title>UpgradeInteraction::GetOtaResponse (48,433,603 samples, 3.70%)</title><rect x="878.7" y="469" width="43.7" height="15.0" fill="rgb(208,180,31)" rx="2" ry="2" />
<text  x="881.72" y="479.5" >Upgr..</text>
</g>
<g >
<title>hrtimer_nanosleep (94,316,438 samples, 7.21%)</title><rect x="1000.5" y="357" width="85.1" height="15.0" fill="rgb(222,157,41)" rx="2" ry="2" />
<text  x="1003.53" y="367.5" >hrtimer_na..</text>
</g>
<g >
<title>schedule (49,187,299 samples, 3.76%)</title><rect x="710.0" y="165" width="44.3" height="15.0" fill="rgb(244,56,13)" rx="2" ry="2" />
<text  x="712.99" y="175.5" >sche..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (24,003,376 samples, 1.83%)</title><rect x="529.2" y="261" width="21.7" height="15.0" fill="rgb(254,28,19)" rx="2" ry="2" />
<text  x="532.22" y="271.5" >s..</text>
</g>
<g >
<title>el0_sync_handler (127,081,934 samples, 9.71%)</title><rect x="52.1" y="165" width="114.6" height="15.0" fill="rgb(235,208,9)" rx="2" ry="2" />
<text  x="55.13" y="175.5" >el0_sync_handler</text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;int, int, int, int, void const*, unsigned int&gt;::operator (127,081,934 samples, 9.71%)</title><rect x="52.1" y="213" width="114.6" height="15.0" fill="rgb(226,50,41)" rx="2" ry="2" />
<text  x="55.13" y="223.5" >iox::posix::Po..</text>
</g>
<g >
<title>iox::runtime::IpcInterfaceBase::send (217,132,381 samples, 16.59%)</title><rect x="10.0" y="261" width="195.8" height="15.0" fill="rgb(225,20,15)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >iox::runtime::IpcInterfac..</text>
</g>
<g >
<title>xxxKeepAlive (19,112,248 samples, 1.46%)</title><rect x="1172.8" y="549" width="17.2" height="15.0" fill="rgb(233,102,22)" rx="2" ry="2" />
<text  x="1175.77" y="559.5" ></text>
</g>
<g >
<title>do_el0_svc (108,672,803 samples, 8.30%)</title><rect x="987.6" y="405" width="98.0" height="15.0" fill="rgb(217,12,8)" rx="2" ry="2" />
<text  x="990.59" y="415.5" >do_el0_svc</text>
</g>
<g >
<title>std::__invoke&lt;void  (935,367,195 samples, 71.47%)</title><rect x="10.0" y="437" width="843.3" height="15.0" fill="rgb(229,149,4)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (17,815,926 samples, 1.36%)</title><rect x="237.4" y="245" width="16.1" height="15.0" fill="rgb(221,211,47)" rx="2" ry="2" />
<text  x="240.40" y="255.5" ></text>
</g>
<g >
<title>gic_handle_irq (2,048,374 samples, 0.16%)</title><rect x="920.5" y="437" width="1.9" height="15.0" fill="rgb(219,96,35)" rx="2" ry="2" />
<text  x="923.54" y="447.5" ></text>
</g>
<g >
<title>iox::posix::Semaphore::timedWait (300,923,604 samples, 22.99%)</title><rect x="567.4" y="389" width="271.3" height="15.0" fill="rgb(213,165,43)" rx="2" ry="2" />
<text  x="570.37" y="399.5" >iox::posix::Semaphore::timedWait</text>
</g>
<g >
<title>__clock_gettime (26,017,595 samples, 1.99%)</title><rect x="815.2" y="341" width="23.5" height="15.0" fill="rgb(205,40,45)" rx="2" ry="2" />
<text  x="818.22" y="351.5" >_..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (436,002 samples, 0.03%)</title><rect x="205.8" y="213" width="0.4" height="15.0" fill="rgb(252,156,20)" rx="2" ry="2" />
<text  x="208.76" y="223.5" ></text>
</g>
<g >
<title>iox::cxx::MethodCallback&lt;void&gt;::operator (618,182,166 samples, 47.23%)</title><rect x="10.0" y="389" width="557.3" height="15.0" fill="rgb(250,150,25)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >iox::cxx::MethodCallback&lt;void&gt;::operator</text>
</g>
<g >
<title>iox::runtime::IpcMessage::IpcMessage (102,296,139 samples, 7.82%)</title><rect x="205.8" y="261" width="92.2" height="15.0" fill="rgb(252,52,46)" rx="2" ry="2" />
<text  x="208.76" y="271.5" >iox::runtim..</text>
</g>
<g >
<title>el0_svc (127,081,934 samples, 9.71%)</title><rect x="52.1" y="149" width="114.6" height="15.0" fill="rgb(253,5,27)" rx="2" ry="2" />
<text  x="55.13" y="159.5" >el0_svc</text>
</g>
</g>
</svg>
