<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="678.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="661" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="661" > </text>
<g id="frames">
<g >
<title>iox::posix::UnixDomainSocket::timedSend (57,206,685 samples, 14.90%)</title><rect x="245.8" y="293" width="175.9" height="15.0" fill="rgb(232,203,35)" rx="2" ry="2" />
<text  x="248.84" y="303.5" >iox::posix::UnixDomain..</text>
</g>
<g >
<title>all (383,939,005 samples, 100%)</title><rect x="10.0" y="629" width="1180.0" height="15.0" fill="rgb(239,8,28)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="533" width="18.3" height="15.0" fill="rgb(214,11,45)" rx="2" ry="2" />
<text  x="1174.67" y="543.5" ></text>
</g>
<g >
<title>iox::runtime::PoshRuntimeImpl::sendKeepAliveAndHandleShutdownPreparation (310,701,554 samples, 80.92%)</title><rect x="71.9" y="357" width="954.9" height="15.0" fill="rgb(229,41,34)" rx="2" ry="2" />
<text  x="74.93" y="367.5" >iox::runtime::PoshRuntimeImpl::sendKeepAliveAndHandleShutdownPreparation</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream@plt (23,056,236 samples, 6.01%)</title><rect x="747.7" y="309" width="70.9" height="15.0" fill="rgb(228,123,22)" rx="2" ry="2" />
<text  x="750.69" y="319.5" >std::__c..</text>
</g>
<g >
<title>iox::posix::UnixDomainSocket::send (116,343,290 samples, 30.30%)</title><rect x="245.8" y="309" width="357.6" height="15.0" fill="rgb(224,173,7)" rx="2" ry="2" />
<text  x="248.84" y="319.5" >iox::posix::UnixDomainSocket::send</text>
</g>
<g >
<title>iox::runtime::IpcMessageTypeToString[abi:cxx11] (56,584,427 samples, 14.74%)</title><rect x="71.9" y="341" width="173.9" height="15.0" fill="rgb(208,227,16)" rx="2" ry="2" />
<text  x="74.93" y="351.5" >iox::runtime::IpcMessa..</text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (377,974,410 samples, 98.45%)</title><rect x="10.0" y="565" width="1161.7" height="15.0" fill="rgb(249,0,7)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>do_el0_svc (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="325" width="144.5" height="15.0" fill="rgb(232,9,51)" rx="2" ry="2" />
<text  x="1029.84" y="335.5" >do_el0_svc</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="549" width="18.3" height="15.0" fill="rgb(224,33,16)" rx="2" ry="2" />
<text  x="1174.67" y="559.5" ></text>
</g>
<g >
<title>iox::cxx::internal::ReturnSuccess&lt;void&gt;::call&lt;iox::cxx::function_ref&lt;void  (330,852,431 samples, 86.17%)</title><rect x="10.0" y="437" width="1016.8" height="15.0" fill="rgb(240,32,16)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >iox::cxx::internal::ReturnSuccess&lt;void&gt;::call&lt;iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>[libpthread-2.30.so] (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="581" width="18.3" height="15.0" fill="rgb(208,104,17)" rx="2" ry="2" />
<text  x="1174.67" y="591.5" ></text>
</g>
<g >
<title>sock_alloc_send_pskb (38,305,679 samples, 9.98%)</title><rect x="245.8" y="101" width="117.8" height="15.0" fill="rgb(234,169,43)" rx="2" ry="2" />
<text  x="248.84" y="111.5" >sock_alloc_sen..</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (687,029 samples, 0.18%)</title><rect x="677.5" y="293" width="2.1" height="15.0" fill="rgb(244,30,46)" rx="2" ry="2" />
<text  x="680.47" y="303.5" ></text>
</g>
<g >
<title>iox::posix::PosixCallEvaluator&lt;int&gt;::evaluate (135,839 samples, 0.04%)</title><rect x="1171.3" y="437" width="0.4" height="15.0" fill="rgb(242,98,39)" rx="2" ry="2" />
<text  x="1174.25" y="447.5" ></text>
</g>
<g >
<title>[libpthread-2.30.so] (377,974,410 samples, 98.45%)</title><rect x="10.0" y="581" width="1161.7" height="15.0" fill="rgb(238,219,53)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>iox::units::Duration::positiveValueOrClampToZero&lt;unsigned long long, char const*&gt;@plt (33,391,025 samples, 8.70%)</title><rect x="500.8" y="293" width="102.6" height="15.0" fill="rgb(250,86,53)" rx="2" ry="2" />
<text  x="503.78" y="303.5" >iox::units::..</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (57,206,685 samples, 14.90%)</title><rect x="245.8" y="165" width="175.9" height="15.0" fill="rgb(207,85,51)" rx="2" ry="2" />
<text  x="248.84" y="175.5" >el0_svc_common.constpr..</text>
</g>
<g >
<title>unix_dgram_sendmsg (57,206,685 samples, 14.90%)</title><rect x="245.8" y="117" width="175.9" height="15.0" fill="rgb(236,67,46)" rx="2" ry="2" />
<text  x="248.84" y="127.5" >unix_dgram_sendmsg</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="485" width="18.3" height="15.0" fill="rgb(207,40,23)" rx="2" ry="2" />
<text  x="1174.67" y="495.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (377,974,410 samples, 98.45%)</title><rect x="10.0" y="485" width="1161.7" height="15.0" fill="rgb(243,167,37)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>iox::cxx::convert::toString&lt;int&gt; (22,847,180 samples, 5.95%)</title><rect x="677.5" y="309" width="70.2" height="15.0" fill="rgb(254,53,35)" rx="2" ry="2" />
<text  x="680.47" y="319.5" >iox::cx..</text>
</g>
<g >
<title>iox::concurrent::PeriodicTask&lt;iox::cxx::MethodCallback&lt;void&gt; &gt;::run (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="469" width="18.3" height="15.0" fill="rgb(226,191,51)" rx="2" ry="2" />
<text  x="1174.67" y="479.5" ></text>
</g>
<g >
<title>el0_sync_handler (57,206,685 samples, 14.90%)</title><rect x="245.8" y="213" width="175.9" height="15.0" fill="rgb(234,76,51)" rx="2" ry="2" />
<text  x="248.84" y="223.5" >el0_sync_handler</text>
</g>
<g >
<title>iox::runtime::IpcInterfaceBase::send (116,343,290 samples, 30.30%)</title><rect x="245.8" y="325" width="357.6" height="15.0" fill="rgb(210,217,7)" rx="2" ry="2" />
<text  x="248.84" y="335.5" >iox::runtime::IpcInterfaceBase::send</text>
</g>
<g >
<title>std::initializer_list&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::begin@plt (67,772,033 samples, 17.65%)</title><rect x="818.6" y="325" width="208.2" height="15.0" fill="rgb(251,70,53)" rx="2" ry="2" />
<text  x="821.55" y="335.5" >std::initializer_list&lt;std::..</text>
</g>
<g >
<title>el0_sync (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="373" width="144.5" height="15.0" fill="rgb(225,187,26)" rx="2" ry="2" />
<text  x="1029.84" y="383.5" >el0_sync</text>
</g>
<g >
<title>__arm64_sys_sendto (57,206,685 samples, 14.90%)</title><rect x="245.8" y="149" width="175.9" height="15.0" fill="rgb(233,61,25)" rx="2" ry="2" />
<text  x="248.84" y="159.5" >__arm64_sys_sendto</text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;long, int, void const*, unsigned long, int, sockaddr const*, unsigned int&gt;::operator (57,206,685 samples, 14.90%)</title><rect x="245.8" y="277" width="175.9" height="15.0" fill="rgb(236,227,33)" rx="2" ry="2" />
<text  x="248.84" y="287.5" >iox::posix::PosixCallB..</text>
</g>
<g >
<title>__wake_up_sync_key (18,901,006 samples, 4.92%)</title><rect x="363.6" y="85" width="58.1" height="15.0" fill="rgb(246,221,31)" rx="2" ry="2" />
<text  x="366.57" y="95.5" >__wake..</text>
</g>
<g >
<title>el0_svc (57,206,685 samples, 14.90%)</title><rect x="245.8" y="197" width="175.9" height="15.0" fill="rgb(237,175,17)" rx="2" ry="2" />
<text  x="248.84" y="207.5" >el0_svc</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (377,974,410 samples, 98.45%)</title><rect x="10.0" y="549" width="1161.7" height="15.0" fill="rgb(235,7,37)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>__sys_sendto (57,206,685 samples, 14.90%)</title><rect x="245.8" y="133" width="175.9" height="15.0" fill="rgb(213,162,0)" rx="2" ry="2" />
<text  x="248.84" y="143.5" >__sys_sendto</text>
</g>
<g >
<title>alloc_skb_with_frags (38,305,679 samples, 9.98%)</title><rect x="245.8" y="85" width="117.8" height="15.0" fill="rgb(207,75,41)" rx="2" ry="2" />
<text  x="248.84" y="95.5" >alloc_skb_with..</text>
</g>
<g >
<title>iox::runtime::IpcMessageTypeToString[abi:cxx11] (45,903,416 samples, 11.96%)</title><rect x="677.5" y="325" width="141.1" height="15.0" fill="rgb(212,214,49)" rx="2" ry="2" />
<text  x="680.47" y="335.5" >iox::runtime::Ipc..</text>
</g>
<g >
<title>el0_svc_common.constprop.0 (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="309" width="144.5" height="15.0" fill="rgb(233,174,17)" rx="2" ry="2" />
<text  x="1029.84" y="319.5" >el0_svc_common.con..</text>
</g>
<g >
<title>[libc-2.30.so] (377,974,410 samples, 98.45%)</title><rect x="10.0" y="597" width="1161.7" height="15.0" fill="rgb(210,204,32)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >[libc-2.30.so]</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (18,901,006 samples, 4.92%)</title><rect x="363.6" y="69" width="58.1" height="15.0" fill="rgb(238,78,20)" rx="2" ry="2" />
<text  x="366.57" y="79.5" >_raw_s..</text>
</g>
<g >
<title>iox_sem_timedwait (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="421" width="144.5" height="15.0" fill="rgb(208,50,23)" rx="2" ry="2" />
<text  x="1029.84" y="431.5" >iox_sem_timedwait</text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;@plt (24,098,388 samples, 6.28%)</title><rect x="603.4" y="309" width="74.1" height="15.0" fill="rgb(206,203,2)" rx="2" ry="2" />
<text  x="606.41" y="319.5" >std::ope..</text>
</g>
<g >
<title>[libpthread-2.30.so] (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="405" width="144.5" height="15.0" fill="rgb(219,121,29)" rx="2" ry="2" />
<text  x="1029.84" y="415.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>std::__invoke&lt;void  (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="501" width="18.3" height="15.0" fill="rgb(227,125,50)" rx="2" ry="2" />
<text  x="1174.67" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="565" width="18.3" height="15.0" fill="rgb(229,22,27)" rx="2" ry="2" />
<text  x="1174.67" y="575.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="517" width="18.3" height="15.0" fill="rgb(248,50,43)" rx="2" ry="2" />
<text  x="1174.67" y="527.5" ></text>
</g>
<g >
<title>iox::cxx::MethodCallback&lt;void&gt;::operator (330,852,431 samples, 86.17%)</title><rect x="10.0" y="453" width="1016.8" height="15.0" fill="rgb(218,80,1)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >iox::cxx::MethodCallback&lt;void&gt;::operator</text>
</g>
<g >
<title>[libc-2.30.so] (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="597" width="18.3" height="15.0" fill="rgb(253,133,40)" rx="2" ry="2" />
<text  x="1174.67" y="607.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (377,974,410 samples, 98.45%)</title><rect x="10.0" y="517" width="1161.7" height="15.0" fill="rgb(237,129,42)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>iox::posix::PosixCallBuilder&lt;int, sem_t*, timespec const*&gt;::operator (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="437" width="144.5" height="15.0" fill="rgb(218,197,5)" rx="2" ry="2" />
<text  x="1029.84" y="447.5" >iox::posix::PosixC..</text>
</g>
<g >
<title>el0_sync_handler (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="357" width="144.5" height="15.0" fill="rgb(254,213,25)" rx="2" ry="2" />
<text  x="1029.84" y="367.5" >el0_sync_handler</text>
</g>
<g >
<title>iox::cxx::internal::methodCallbackCaller&lt;void, iox::runtime::PoshRuntimeImpl&gt; (310,701,554 samples, 80.92%)</title><rect x="71.9" y="373" width="954.9" height="15.0" fill="rgb(244,57,8)" rx="2" ry="2" />
<text  x="74.93" y="383.5" >iox::cxx::internal::methodCallbackCaller&lt;void, iox::runtime::PoshRuntimeImpl&gt;</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (687,029 samples, 0.18%)</title><rect x="677.5" y="261" width="2.1" height="15.0" fill="rgb(212,9,50)" rx="2" ry="2" />
<text  x="680.47" y="271.5" ></text>
</g>
<g >
<title>iox::cxx::variant&lt;iox::posix::PosixCallResult&lt;int&gt;, iox::posix::PosixCallResult&lt;int&gt; &gt;::emplace_at_index&lt;0ul, iox::posix::PosixCallResult&lt;int&gt; &gt;@plt (135,839 samples, 0.04%)</title><rect x="1171.3" y="405" width="0.4" height="15.0" fill="rgb(250,46,10)" rx="2" ry="2" />
<text  x="1174.25" y="415.5" ></text>
</g>
<g >
<title>el0_sync (57,206,685 samples, 14.90%)</title><rect x="245.8" y="229" width="175.9" height="15.0" fill="rgb(252,174,32)" rx="2" ry="2" />
<text  x="248.84" y="239.5" >el0_sync</text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (687,029 samples, 0.18%)</title><rect x="677.5" y="245" width="2.1" height="15.0" fill="rgb(229,175,3)" rx="2" ry="2" />
<text  x="680.47" y="255.5" ></text>
</g>
<g >
<title>xxxKeepAlive (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="613" width="18.3" height="15.0" fill="rgb(225,19,4)" rx="2" ry="2" />
<text  x="1174.67" y="623.5" ></text>
</g>
<g >
<title>iox::cxx::function_ref&lt;void  (310,701,554 samples, 80.92%)</title><rect x="71.9" y="389" width="954.9" height="15.0" fill="rgb(236,29,49)" rx="2" ry="2" />
<text  x="74.93" y="399.5" >iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>kmem_cache_alloc (38,305,679 samples, 9.98%)</title><rect x="245.8" y="53" width="117.8" height="15.0" fill="rgb(230,23,53)" rx="2" ry="2" />
<text  x="248.84" y="63.5" >kmem_cache_alloc</text>
</g>
<g >
<title>el0_svc (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="341" width="144.5" height="15.0" fill="rgb(215,151,41)" rx="2" ry="2" />
<text  x="1029.84" y="351.5" >el0_svc</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (687,029 samples, 0.18%)</title><rect x="677.5" y="277" width="2.1" height="15.0" fill="rgb(248,182,34)" rx="2" ry="2" />
<text  x="680.47" y="287.5" ></text>
</g>
<g >
<title>__alloc_skb (38,305,679 samples, 9.98%)</title><rect x="245.8" y="69" width="117.8" height="15.0" fill="rgb(240,63,25)" rx="2" ry="2" />
<text  x="248.84" y="79.5" >__alloc_skb</text>
</g>
<g >
<title>iox::runtime::IpcMessage::IpcMessage (24,098,388 samples, 6.28%)</title><rect x="603.4" y="325" width="74.1" height="15.0" fill="rgb(221,164,10)" rx="2" ry="2" />
<text  x="606.41" y="335.5" >iox::run..</text>
</g>
<g >
<title>__dynamic_cast (687,029 samples, 0.18%)</title><rect x="677.5" y="229" width="2.1" height="15.0" fill="rgb(212,162,53)" rx="2" ry="2" />
<text  x="680.47" y="239.5" ></text>
</g>
<g >
<title>strcmp (687,029 samples, 0.18%)</title><rect x="677.5" y="213" width="2.1" height="15.0" fill="rgb(234,215,18)" rx="2" ry="2" />
<text  x="680.47" y="223.5" ></text>
</g>
<g >
<title>sock_def_readable (18,901,006 samples, 4.92%)</title><rect x="363.6" y="101" width="58.1" height="15.0" fill="rgb(245,3,32)" rx="2" ry="2" />
<text  x="366.57" y="111.5" >sock_d..</text>
</g>
<g >
<title>iox::cxx::function_ref&lt;void  (330,852,431 samples, 86.17%)</title><rect x="10.0" y="405" width="1016.8" height="15.0" fill="rgb(247,164,47)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >iox::cxx::function_ref&lt;void </text>
</g>
<g >
<title>iox::cxx::expected&lt;iox::posix::PosixCallResult&lt;int&gt;, iox::posix::PosixCallResult&lt;int&gt; &gt;::expected (135,839 samples, 0.04%)</title><rect x="1171.3" y="421" width="0.4" height="15.0" fill="rgb(210,158,48)" rx="2" ry="2" />
<text  x="1174.25" y="431.5" ></text>
</g>
<g >
<title>iox::cxx::MethodCallback&lt;void&gt;::operator (5,964,595 samples, 1.55%)</title><rect x="1171.7" y="453" width="18.3" height="15.0" fill="rgb(238,71,13)" rx="2" ry="2" />
<text  x="1174.67" y="463.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (377,974,410 samples, 98.45%)</title><rect x="10.0" y="533" width="1161.7" height="15.0" fill="rgb(226,46,42)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__invoke&lt;void  (377,974,410 samples, 98.45%)</title><rect x="10.0" y="501" width="1161.7" height="15.0" fill="rgb(229,119,34)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>sendto (57,206,685 samples, 14.90%)</title><rect x="245.8" y="245" width="175.9" height="15.0" fill="rgb(246,105,33)" rx="2" ry="2" />
<text  x="248.84" y="255.5" >sendto</text>
</g>
<g >
<title>iox_sendto (57,206,685 samples, 14.90%)</title><rect x="245.8" y="261" width="175.9" height="15.0" fill="rgb(223,229,54)" rx="2" ry="2" />
<text  x="248.84" y="271.5" >iox_sendto</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init@plt (22,160,151 samples, 5.77%)</title><rect x="679.6" y="293" width="68.1" height="15.0" fill="rgb(249,63,7)" rx="2" ry="2" />
<text  x="682.58" y="303.5" >std::ba..</text>
</g>
<g >
<title>__arm64_sys_futex (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="293" width="144.5" height="15.0" fill="rgb(229,207,24)" rx="2" ry="2" />
<text  x="1029.84" y="303.5" >__arm64_sys_futex</text>
</g>
<g >
<title>iox::runtime::IpcRuntimeInterface::sendKeepalive (254,117,127 samples, 66.19%)</title><rect x="245.8" y="341" width="781.0" height="15.0" fill="rgb(205,93,41)" rx="2" ry="2" />
<text  x="248.84" y="351.5" >iox::runtime::IpcRuntimeInterface::sendKeepalive</text>
</g>
<g >
<title>iox::posix::Semaphore::timedWait (47,121,979 samples, 12.27%)</title><rect x="1026.8" y="453" width="144.9" height="15.0" fill="rgb(248,37,43)" rx="2" ry="2" />
<text  x="1029.84" y="463.5" >iox::posix::Semaph..</text>
</g>
<g >
<title>do_el0_svc (57,206,685 samples, 14.90%)</title><rect x="245.8" y="181" width="175.9" height="15.0" fill="rgb(239,219,47)" rx="2" ry="2" />
<text  x="248.84" y="191.5" >do_el0_svc</text>
</g>
<g >
<title>get_obj_cgroup_from_current (38,305,679 samples, 9.98%)</title><rect x="245.8" y="37" width="117.8" height="15.0" fill="rgb(239,49,25)" rx="2" ry="2" />
<text  x="248.84" y="47.5" >get_obj_cgroup..</text>
</g>
<g >
<title>iox::concurrent::PeriodicTask&lt;iox::cxx::MethodCallback&lt;void&gt; &gt;::run (377,974,410 samples, 98.45%)</title><rect x="10.0" y="469" width="1161.7" height="15.0" fill="rgb(249,160,38)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >iox::concurrent::PeriodicTask&lt;iox::cxx::MethodCallback&lt;void&gt; &gt;::run</text>
</g>
<g >
<title>KeepAlive (377,974,410 samples, 98.45%)</title><rect x="10.0" y="613" width="1161.7" height="15.0" fill="rgb(239,100,34)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >KeepAlive</text>
</g>
<g >
<title>[libpthread-2.30.so] (46,986,140 samples, 12.24%)</title><rect x="1026.8" y="389" width="144.5" height="15.0" fill="rgb(226,15,18)" rx="2" ry="2" />
<text  x="1029.84" y="399.5" >[libpthread-2.30.so]</text>
</g>
<g >
<title>iox::units::Duration::Duration@plt (25,745,580 samples, 6.71%)</title><rect x="421.7" y="293" width="79.1" height="15.0" fill="rgb(245,45,8)" rx="2" ry="2" />
<text  x="424.66" y="303.5" >iox::unit..</text>
</g>
<g >
<title>iox::cxx::function_ref&lt;void  (330,852,431 samples, 86.17%)</title><rect x="10.0" y="421" width="1016.8" height="15.0" fill="rgb(242,204,23)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >iox::cxx::function_ref&lt;void </text>
</g>
</g>
</svg>
